package ca.twining.rpg.game;

import ca.twining.rpg.game.entity.mob.Player;
import ca.twining.rpg.game.graphics.Sprite;
import ca.twining.rpg.game.level.tile.Tile;

public class Screen {
	public int width;
	public int height;

	public int xOffset;
	public int yOffset;

	public int[] pixels;

	public Screen(int width, int height) {
		this.width = width;
		this.height = height;

		pixels = new int[width * height];
	}

	public void clear() {
		// clear the screen
		for (int i = 0; i < pixels.length; i++) {
			pixels[i] = 0;
		}
	}

	public void drawHealthHUD(int xp, int yp, Player player, Sprite sprite1, Sprite sprite2) {
		xp -= xOffset;
		yp -= yOffset;
		
		if(player.health % 2 == 0){
			for(int i = 0; i < (player.health / 2); i++){
				xp = xp + 8;
				for(int y = 0; y < sprite1.SIZE; y++){
					int ya = y + yp;
					for(int x = 0; x < sprite1.SIZE; x++){
						int xa = x + xp;
						if (xa < -sprite1.SIZE || xa >= width || ya < 0 || ya >= height) break;
						if (xa < 0) xa = 0;
						int col = sprite1.pixels[x + y * sprite1.SIZE];
						if (col != 0xffff00ff) pixels[xa + ya * width] = col;
					}
				}
			}
		}else{
			for(int j = 0; j < ((player.health - 1) / 2); j++){
				xp = xp + 8;
				for(int y = 0; y < sprite1.SIZE; y++){
					int ya = y + yp;
					for(int x = 0; x < sprite1.SIZE; x++){
						int xa = x + xp;
						if (xa < -sprite1.SIZE || xa >= width || ya < 0 || ya >= height) break;
						if (xa < 0) xa = 0;
						int col = sprite1.pixels[x + y * sprite1.SIZE];
						if (col != 0xffff00ff) pixels[xa + ya * width] = col;
					}
				}
			}
			xp = xp + 8;
			for(int y = 0; y < sprite2.SIZE; y++){
				int ya = y + yp;
				for(int x = 0; x < sprite2.SIZE; x++){
					int xa = x + xp;
					if (xa < -sprite2.SIZE || xa >= width || ya < 0 || ya >= height) break;
					if (xa < 0) xa = 0;
					int col = sprite2.pixels[x + y * sprite2.SIZE];
					if (col != 0xffff00ff) pixels[xa + ya * width] = col;
				}
			}
		}
	}
	
	public void drawArmourHUD(int xp, int yp, Player player, Sprite sprite1, Sprite sprite2){
		xp -= xOffset;
		yp -= yOffset;
		
		if(player.armourRating % 2 == 0){
			for(int i = 0; i < (player.armourRating / 2); i++){
				xp = xp + 8;
				for(int y = 0; y < sprite1.SIZE; y++){
					int ya = y + yp;
					for(int x = 0; x < sprite1.SIZE; x++){
						int xa = x + xp;
						if (xa < -sprite1.SIZE || xa >= width || ya < 0 || ya >= height) break;
						if (xa < 0) xa = 0;
						int col = sprite1.pixels[x + y * sprite1.SIZE];
						if (col != 0xffff00ff) pixels[xa + ya * width] = col;
					}
				}
			}
		}else{
			for(int j = 0; j < ((player.armourRating - 1) / 2); j++){
				xp = xp + 8;
				for(int y = 0; y < sprite1.SIZE; y++){
					int ya = y + yp;
					for(int x = 0; x < sprite1.SIZE; x++){
						int xa = x + xp;
						if (xa < -sprite1.SIZE || xa >= width || ya < 0 || ya >= height) break;
						if (xa < 0) xa = 0;
						int col = sprite1.pixels[x + y * sprite1.SIZE];
						if (col != 0xffff00ff) pixels[xa + ya * width] = col;
					}
				}
			}
			xp = xp + 8;
			for(int y = 0; y < sprite2.SIZE; y++){
				int ya = y + yp;
				for(int x = 0; x < sprite2.SIZE; x++){
					int xa = x + xp;
					if (xa < -sprite2.SIZE || xa >= width || ya < 0 || ya >= height) break;
					if (xa < 0) xa = 0;
					int col = sprite2.pixels[x + y * sprite2.SIZE];
					if (col != 0xffff00ff) pixels[xa + ya * width] = col;
				}
			}
		}
	}

	public void drawTile(int xp, int yp, Tile tile) {
		xp -= xOffset;
		yp -= yOffset;

		for (int y = 0; y < tile.sprite.SIZE; y++) {
			int ya = y + yp;
			for (int x = 0; x < tile.sprite.SIZE; x++) {
				int xa = x + xp;
				if (xa < -tile.sprite.SIZE || xa >= width || ya < 0 || ya >= height) break;
				if (xa < 0) xa = 0;
				pixels[xa + ya * width] = tile.sprite.pixels[x + y * tile.sprite.SIZE];
			}
		}
	}

	public void drawPlayer(int xp, int yp, Sprite sprite, boolean xFlip, boolean yFlip) {
		xp -= xOffset;
		yp -= yOffset;

		for (int y = 0; y < sprite.SIZE; y++) {
			int ya = y + yp;
			int ys = y;
			if (yFlip) {
				ys = (sprite.SIZE - 1) - y;
			}
			for (int x = 0; x < sprite.SIZE; x++) {
				int xa = x + xp;
				int xs = x;
				if (xFlip) {
					xs = (sprite.SIZE - 1) - x;
				}
				if (xa < -sprite.SIZE || xa >= width || ya < 0 || ya >= height) break;
				if (xa < 0) xa = 0;
				int col = sprite.pixels[xs + ys * sprite.SIZE];
				if (col != 0xffff00ff) pixels[xa + ya * width] = col;
			}
		}
	}
	
	public void drawEnemy(int xp, int yp, Sprite sprite, boolean xFlip, boolean yFlip) {
		xp -= xOffset;
		yp -= yOffset;

		for (int y = 0; y < sprite.SIZE; y++) {
			int ya = y + yp;
			int ys = y;
			if (yFlip) {
				ys = (sprite.SIZE - 1) - y;
			}
			for (int x = 0; x < sprite.SIZE; x++) {
				int xa = x + xp;
				int xs = x;
				if (xFlip) {
					xs = (sprite.SIZE - 1) - x;
				}
				if (xa < -sprite.SIZE || xa >= width || ya < 0 || ya >= height) break;
				if (xa < 0) xa = 0;
				int col = sprite.pixels[xs + ys * sprite.SIZE];
				if (col != 0xffff00ff) pixels[xa + ya * width] = col;
			}
		}
	}
	
	public void drawLine(int xp1, int yp1, int xp2, int yp2, int color){
		int xDist = Math.abs(xp2 - xp1);
		int yDist = Math.abs(yp2 - yp1);
	}

	public void drawEntity(int xp, int yp, Sprite sprite) {
		xp -= xOffset;
		yp -= yOffset;

		for (int y = 0; y < sprite.SIZE; y++) {
			int ya = y + yp;
			for (int x = 0; x < sprite.SIZE; x++) {
				int xa = x + xp;
				if (xa < -sprite.SIZE || xa >= width || ya < 0 || ya >= height) break;
				if (xa < 0) xa = 0;
				int col = sprite.pixels[x + y * sprite.SIZE];
				if (col != 0xffff00ff) pixels[xa + ya * width] = col;
			}
		}
	}

	public void setOffset(int xOffset, int yOffset) {
		this.xOffset = xOffset;
		this.yOffset = yOffset;
	}

}