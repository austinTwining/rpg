package ca.twining.rpg.game.level;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;

import ca.twining.rpg.game.entity.Entity;
import ca.twining.rpg.game.entity.mob.PirateEnemy;
import ca.twining.rpg.game.graphics.Sprite;
import ca.twining.rpg.game.level.tile.DirtTile;
import ca.twining.rpg.game.level.tile.GrassTile;
import ca.twining.rpg.game.level.tile.LavaTile;
import ca.twining.rpg.game.level.tile.LongGrassTile;
import ca.twining.rpg.game.level.tile.RockTile;
import ca.twining.rpg.game.level.tile.SandTile;
import ca.twining.rpg.game.level.tile.Tile;

public class SpawnLevel extends Level {
	
	private int[] levelPixels;
	
	private Tile tempTile;
	
	public SpawnLevel(String path){
		super(path);
		entities = new ArrayList<Entity>();
		
		for(int i = 1; i <= 1; i++){
			Entity tempEntity = new PirateEnemy(i * 30, i * 30);
			tempEntity.level = this;
			
			spawnEntity(tempEntity);
		}
	}
	
	public void update(){
		for(int i = 0; i < entities.size(); i++){
			entities.get(i).update();
		}
	}
	
	// grass = 0x007F0E
	// sand = 0xFFEFA3
	// rock = 0x4C4C4C
	// dirt = 0x695200
	// longgrass = 0x8CFF99
	// lava = 0xFF8426
	protected void generateLevel(){
		
		for(int y = 0; y < height; y++){
			for(int x = 0; x < width; x++){
				if(levelPixels[x + y * width] == 0xff007F0E){
					tempTile = Tile.grassTile;//grass
					tempTile.setX(x << 4);
					tempTile.setY(y << 4);
					tiles[x + y * width] = tempTile;
				}
				else if(levelPixels[x + y * width] == 0xff4C4C4C){ 
					tempTile = Tile.rockTile;//rock
					tempTile.setX(x << 4);
					tempTile.setY(y << 4);
					tiles[x + y * width] = tempTile;
				}
				else if(levelPixels[x + y * width] == 0xff8CFF99){ 
					tempTile = Tile.longGrassTile;//longgrass
					tempTile.setX(x << 4);
					tempTile.setY(y * 4);
					tiles[x + y * width] = tempTile;
				}
				else if(levelPixels[x + y * width] == 0xff695200){
					tempTile = Tile.dirtTile;//dirt
					tempTile.setX(x << 4);
					tempTile.setY(y << 4);
					tiles[x + y * width] = tempTile;
				}
				else if(levelPixels[x + y * width] == 0xffFFEFA3){
					tempTile = Tile.sandTile;//sand
					tempTile.setX(x << 4);
					tempTile.setY(y << 4);
					tiles[x + y * width] = tempTile;
				}
				else if(levelPixels[x + y * width] == 0xffFF8426){
					tempTile = Tile.lavaTile;//lava
					tempTile.setX(x << 4);
					tempTile.setY(y << 4);
					tiles[x + y * width] = tempTile;
				}
			}
		}
	}
	
	protected void loadLevel(String path) {
		try {
			BufferedImage image = ImageIO.read(SpawnLevel.class.getResource(path));
			width = image.getWidth();
			height = image.getHeight();
			tiles = new Tile[width * height];
			levelPixels = new int[width * height];
			image.getRGB(0, 0, width, height, levelPixels, 0, width);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
